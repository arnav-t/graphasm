{"version":3,"sources":["scripts/py-worker.js","scripts/networkx.js","components/Menu.js","components/App.js","index.js"],"names":["pyodideWorker","Worker","asyncRun","script","context","Promise","onSuccess","onError","onerror","onmessage","e","data","postMessage","python","run","directed","format","readCommand","Menu","setGraph","useState","setDirected","setFormat","input","setInput","error","setError","draw","a","obj","JSON","parse","replace","Array","isArray","Error","results","useEffect","label","checked","onChange","target","row","name","options","value","radioClassNames","className","node","type","waves","onClick","right","App","graph","trigger","icon","floating","large","display","active","size","color","src","alt","fixed","href","user","background","userView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7304ea90.chunk.js","sourcesContent":["const pyodideWorker = new Worker('./pyodide/webworker.js');\n\nexport const run = (script, context, onSuccess, onError) => {\n  pyodideWorker.onerror = onError;\n  pyodideWorker.onmessage = (e) => onSuccess(e.data);\n  pyodideWorker.postMessage({\n    ...context,\n    python: script,\n  });\n};\n\n// Transform the run (callback) form to a more modern async form.\n// This is what allows to write:\n//    const {results, error} = await asyncRun(script, context);\n// Instead of:\n//    run(script, context, successCallback, errorCallback);\nexport const asyncRun = (script, context) => {\n  return new Promise(function(onSuccess, onError) {\n    run(script, context, onSuccess, onError);\n  });\n};\n\n","export const script = (directed, format, data) => {\n  let readCommand = ''\n  switch (format) {\n  case 'Edge List':\n    readCommand = 'G.add_edges_from(data)';\n    break;\n  case 'Adjacency List':\n    readCommand = 'G.add_edges_from(toEdgeList(data))'\n    break;\n  default:\n    readCommand = 'G = nx.from_numpy_matrix(np.asarray(data), create_using=G)'\n  }\n\n  const py = `\n  import networkx as nx\n  __import__('os').environ['MPLBACKEND'] = 'AGG'\n  import matplotlib.pyplot as plt\n  import numpy as np\n  import io, base64\n\n  def toEdgeList(adjl):\n    edges = []\n    for i, l in enumerate(adjl):\n      for j in l:\n        edges.append([i, j])\n    return edges\n\n  data = ${data} \n  G = nx.${directed ? 'Di' : ''}Graph()\n  ${readCommand}\n  plt.clf()\n  plt.box(False)\n  #layout = nx.kamada_kawai_layout(G)\n  nx.draw_networkx(G, alpha=1)#, pos=layout)\n  buf = io.BytesIO()\n  plt.savefig(buf, format='png')\n  buf.seek(0)\n  'data:image/png;base64,' + base64.b64encode(buf.read()).decode('UTF-8')\n  `;\n  return py;\n};","import { useState, useEffect } from \"react\";\nimport { Checkbox, RadioGroup, CardPanel, Textarea, Button, Icon } from 'react-materialize';\nimport { asyncRun } from '../scripts/py-worker';\nimport { script } from '../scripts/networkx';\n\nexport const Menu = ({ setGraph }) => {\n  const [directed, setDirected] = useState(false);\n  const [format, setFormat] = useState('Edge List');\n  const [input, setInput] = useState('[[0,1],[1,2],[2,0]]');\n  const [error, setError] = useState(false);\n\n  const draw = async () => {\n    try {\n      const obj = JSON.parse(input.replace(/'/g, '\"'));\n      if (!Array.isArray(obj)) throw new Error('Not an array!');\n    } catch {\n      setError(true);\n      return;\n    }\n    setGraph(null);\n    const {results, error} = await asyncRun(script(directed, format, input), {});\n    if (error) {\n      setGraph('');\n      setError(true);\n    } else {\n      setGraph(results);\n      setError(false);\n    }\n  };\n\n  useEffect(() => draw(), []);\n\n  useEffect(() => {\n    setError(false);\n  }, [input]);\n\n  return (\n    <CardPanel>\n      <p>\n        <Checkbox \n          label='Directed' \n          checked={directed}\n          onChange={({target}) => setDirected(target.checked)}\n        />\n      </p>\n      <p>\n        <RadioGroup\n          row\n          label='Input Format'\n          name='format'\n          options={[\n            {\n              label: 'Edge List',\n              value: 'Edge List'\n            },\n            {\n              label: 'Adjacency List',\n              value: 'Adjacency List'\n            },\n            {\n              label: 'Adjacency Matrix',\n              value: 'Adjacency Matrix'\n            }\n          ]}\n          value={format}\n          onChange={({target}) => setFormat(target.value)}\n          radioClassNames='row'\n        />\n      </p>\n      <Textarea \n        value={input}\n        onChange={({target}) => setInput(target.value)}\n        label={format}\n        className={error ? 'invalid' : ''}\n        error='Invalid input'\n      />\n      <Button\n        node='button'\n        type='submit'\n        waves='light'\n        onClick={draw}\n      >\n        Draw\n        <Icon right>\n          device_hub\n        </Icon>\n      </Button>\n    </CardPanel>\n  );\n};","import { useState } from 'react';\nimport { Menu } from './Menu';\nimport { SideNav, SideNavItem, Button, Icon, Preloader } from 'react-materialize';\nimport '../styles/App.css';\n\nexport const App = () => {\n  const [graph, setGraph] = useState(null);\n\n  const trigger = <Button icon={<Icon>menu</Icon>} floating large className='black'/>;\n  let display = <Preloader active size='big' color='red'/>;\n  if (graph === '') display = <Icon large color='red'>clear</Icon>;\n  else if (graph) display = <img className='graph' src={graph} alt='graph'/>;\n  return (\n    <div>\n      <SideNav fixed trigger={trigger}>\n        <SideNavItem\n          href='#'\n          user={{\n            background: './graph-pattern.jpg',\n            name: 'Graphasm'\n          }}\n          userView\n        />\n        <Menu setGraph={setGraph}/>\n      </SideNav>\n      <div className='center-align'>\n        {display}\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport { App } from './components/App';\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport \"materialize-css/dist/js/materialize.min.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}